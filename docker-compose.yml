services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healink-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: HealinkDB
      POSTGRES_MULTIPLE_DATABASES: ${AUTH_DB_NAME},${USER_DB_NAME},${CONTENT_DB_NAME},${SUBSCRIPTION_DB_NAME},${PAYMENT_DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - healink-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d HealinkDB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: healink-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:5672" # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - healink-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache for Distributed Caching
  redis:
    image: redis:7-alpine
    container_name: healink-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - healink-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # AuthService API
  authservice-api:
    build:
      # SỬA Ở ĐÂY: Đặt ngữ cảnh là thư mục gốc của dự án
      context: .
      # SỬA Ở ĐÂY: Cung cấp đường dẫn đầy đủ đến Dockerfile
      dockerfile: ./src/AuthService/AuthService.API/Dockerfile
    container_name: authservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: AuthService
    ports:
      - "5001:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # UserService API
  userservice-api:
    build:
      context: .
      dockerfile: ./src/UserService/UserService.API/Dockerfile
    container_name: userservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: UserService
      # AWS S3 Configuration
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_CLOUDFRONT_URL: ${AWS_S3_CLOUDFRONT_URL}
    ports:
      - "5002:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NotificationService API
  notificationservice-api:
    build:
      context: .
      dockerfile: ./src/NotificaitonService/NotificaitonService.API/Dockerfile
    container_name: notificationservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: NotificationService
    ports:
      - "5003:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ContentService API
  contentservice-api:
    build:
      context: .
      dockerfile: ./src/ContentService/ContentService.API/Dockerfile
    container_name: contentservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: ContentService
      # AWS S3 Configuration
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_CLOUDFRONT_URL: ${AWS_S3_CLOUDFRONT_URL}
    ports:
      - "5004:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SubscriptionService API
  subscriptionservice-api:
    build:
      context: .
      dockerfile: ./src/SubscriptionService/SubscriptionService.API/Dockerfile
    container_name: subscriptionservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: SubscriptionService
    ports:
      - "5005:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PaymentService API
  paymentservice-api:
    build:
      context: .
      dockerfile: ./src/PaymentService/PaymentService.API/Dockerfile
    container_name: paymentservice-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: PaymentService
    ports:
      - "5006:80"
    volumes:
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Gateway API
  gateway-api:
    build:
      # SỬA Ở ĐÂY: Đặt ngữ cảnh là thư mục gốc của dự án
      context: .
      # SỬA Ở ĐÂY: Cung cấp đường dẫn đầy đủ đến Dockerfile
      dockerfile: ./src/Gateway/Gateway.API/Dockerfile
    container_name: gateway-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # Environment variables will be loaded from .env file automatically by EnvironmentConfiguration
      SERVICE_NAME: Gateway
    ports:
      - "5010:80"  # Changed from 5000 to avoid conflict with AirPlay on macOS
    volumes:
      - ./.env:/app/.env
    depends_on:
      authservice-api:
        condition: service_healthy
      userservice-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - healink-network
    restart: unless-stopped

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healink-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - healink-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

networks:
  healink-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
