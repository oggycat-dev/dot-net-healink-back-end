# Nuke AWS Workflow
# Destroy all Healink AWS resources EXCEPT ECR and RDS
# ‚ö†Ô∏è USE WITH EXTREME CAUTION ‚ö†Ô∏è
# This will DESTROY: ECS, ALB, Redis, RabbitMQ, CloudWatch logs, etc.
# This will KEEP: ECR repositories (Docker images), RDS PostgreSQL (data safe)

name: ‚ò¢Ô∏è Nuke AWS (Keep ONLY ECR & RDS)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to nuke'
        required: true
        type: choice
        options:
          - free
          - dev
          - prod
        default: 'free'
      confirmation:
        description: 'Type "NUKE" to confirm destruction'
        required: true
        type: string
      keep_ecr_images:
        description: 'Keep ECR images (recommended)'
        required: false
        type: boolean
        default: true
      keep_rds:
        description: 'Keep RDS database (recommended)'
        required: false
        type: boolean
        default: true

env:
  AWS_REGION: ap-southeast-2

jobs:
  # ============================================
  # SAFETY CHECK
  # ============================================
  safety-check:
    name: üõ°Ô∏è Safety Confirmation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚ö†Ô∏è Validate confirmation
        run: |
          if [ "${{ inputs.confirmation }}" != "NUKE" ]; then
            echo "‚ùå ERROR: Confirmation failed"
            echo "You must type 'NUKE' exactly to proceed"
            echo "You typed: '${{ inputs.confirmation }}'"
            exit 1
          fi
          
          echo "‚úÖ Confirmation validated"
          echo ""
          echo "‚ö†Ô∏è  WARNING: This will DESTROY the following:"
          echo "   - ECS Clusters and Services"
          echo "   - Application Load Balancers"
          echo "   - Target Groups"
          echo "   - Security Groups"
          echo "   - CloudWatch Log Groups"
          echo "   - IAM Roles (ECS Task Execution)"
          echo "   - ElastiCache Redis (~$12/month saved)"
          echo "   - Amazon MQ RabbitMQ (~$13/month saved)"
          echo ""
          echo "‚úÖ This will KEEP (safe):"
          if [ "${{ inputs.keep_ecr_images }}" == "true" ]; then
            echo "   - ECR Repositories and Docker Images"
          fi
          if [ "${{ inputs.keep_rds }}" == "true" ]; then
            echo "   - RDS PostgreSQL Database (data preserved)"
          fi
          echo ""
          echo "Environment: ${{ inputs.environment }}"

  # ============================================
  # DESTROY APPLICATION LAYER
  # ============================================
  destroy-application:
    name: üí£ Destroy Application Infrastructure
    runs-on: ubuntu-latest
    needs: [safety-check]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üîß Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: üí£ Destroy Application Layer
        working-directory: ./terraform_healink/app-infra
        run: |
          echo "üî• Destroying application infrastructure in ${{ inputs.environment }}..."
          
          # Initialize
          terraform init -reconfigure
          
          # Select workspace
          terraform workspace select ${{ inputs.environment }} || {
            echo "‚ùå Workspace ${{ inputs.environment }} not found"
            exit 1
          }
          
          # Show what will be destroyed
          echo "=== Resources to be destroyed ==="
          terraform plan -destroy
          
          # Destroy
          echo ""
          echo "üî• Starting destruction..."
          terraform destroy -auto-approve
          
          echo "‚úÖ Application infrastructure destroyed"

      - name: üìä Verify destruction
        working-directory: ./terraform_healink/app-infra
        run: |
          terraform workspace select ${{ inputs.environment }}
          terraform show || echo "No resources remaining in app-infra"

  # ============================================
  # MANUAL ECS CLEANUP (Safety Net)
  # ============================================
  cleanup-ecs:
    name: üßπ Manual ECS Cleanup
    runs-on: ubuntu-latest
    needs: [destroy-application]
    if: always()
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üßπ Force delete ECS services
        run: |
          echo "Cleaning up any remaining ECS services..."
          
          # List all clusters
          CLUSTERS=$(aws ecs list-clusters --query 'clusterArns[]' --output text || echo "")
          
          if [ -z "$CLUSTERS" ]; then
            echo "No ECS clusters found"
            exit 0
          fi
          
          for CLUSTER in $CLUSTERS; do
            echo "Checking cluster: $CLUSTER"
            
            # List services in cluster
            SERVICES=$(aws ecs list-services --cluster $CLUSTER --query 'serviceArns[]' --output text || echo "")
            
            if [ -z "$SERVICES" ]; then
              echo "  No services in this cluster"
              continue
            fi
            
            # Force delete each service
            for SERVICE in $SERVICES; do
              echo "  Force deleting service: $SERVICE"
              aws ecs delete-service --cluster $CLUSTER --service $SERVICE --force || echo "  Failed to delete $SERVICE"
            done
            
            # Delete cluster
            echo "  Deleting cluster: $CLUSTER"
            aws ecs delete-cluster --cluster $CLUSTER || echo "  Failed to delete cluster"
          done
          
          echo "‚úÖ ECS cleanup completed"

  # ============================================
  # MANUAL ALB CLEANUP
  # ============================================
  cleanup-alb:
    name: üßπ Manual ALB Cleanup
    runs-on: ubuntu-latest
    needs: [destroy-application]
    if: always()
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üßπ Delete load balancers
        run: |
          echo "Cleaning up load balancers..."
          
          # List all load balancers with healink tag
          ALBS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?starts_with(LoadBalancerName, 'healink')].LoadBalancerArn" \
            --output text || echo "")
          
          if [ -z "$ALBS" ]; then
            echo "No ALBs found"
            exit 0
          fi
          
          for ALB in $ALBS; do
            echo "Deleting ALB: $ALB"
            aws elbv2 delete-load-balancer --load-balancer-arn $ALB || echo "Failed to delete $ALB"
          done
          
          echo "‚úÖ ALB cleanup completed"

      - name: üßπ Delete target groups
        run: |
          echo "Cleaning up target groups..."
          
          # Wait for ALBs to be deleted
          sleep 30
          
          # List all target groups with healink tag
          TGS=$(aws elbv2 describe-target-groups \
            --query "TargetGroups[?starts_with(TargetGroupName, 'healink')].TargetGroupArn" \
            --output text || echo "")
          
          if [ -z "$TGS" ]; then
            echo "No target groups found"
            exit 0
          fi
          
          for TG in $TGS; do
            echo "Deleting target group: $TG"
            aws elbv2 delete-target-group --target-group-arn $TG || echo "Failed to delete $TG"
          done
          
          echo "‚úÖ Target group cleanup completed"

  # ============================================
  # CLOUDWATCH LOGS CLEANUP
  # ============================================
  cleanup-logs:
    name: üßπ CloudWatch Logs Cleanup
    runs-on: ubuntu-latest
    needs: [cleanup-ecs]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üßπ Delete CloudWatch log groups
        run: |
          echo "Cleaning up CloudWatch log groups..."
          
          # List all log groups starting with /ecs/healink
          LOG_GROUPS=$(aws logs describe-log-groups \
            --log-group-name-prefix "/ecs/healink" \
            --query 'logGroups[].logGroupName' \
            --output text || echo "")
          
          if [ -z "$LOG_GROUPS" ]; then
            echo "No log groups found"
            exit 0
          fi
          
          for LOG_GROUP in $LOG_GROUPS; do
            echo "Deleting log group: $LOG_GROUP"
            aws logs delete-log-group --log-group-name $LOG_GROUP || echo "Failed to delete $LOG_GROUP"
          done
          
          echo "‚úÖ CloudWatch logs cleanup completed"

  # ============================================
  # DESTROY REDIS (ElastiCache)
  # ============================================
  destroy-redis:
    name: üí£ Destroy Redis Cache
    runs-on: ubuntu-latest
    needs: [cleanup-logs]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üî• Delete ElastiCache clusters
        run: |
          echo "Destroying Redis clusters..."
          
          # List all replication groups starting with healink
          REDIS_CLUSTERS=$(aws elasticache describe-replication-groups \
            --query "ReplicationGroups[?starts_with(ReplicationGroupId, 'healink')].ReplicationGroupId" \
            --output text || echo "")
          
          if [ -z "$REDIS_CLUSTERS" ]; then
            echo "No Redis clusters found"
          else
            for CLUSTER in $REDIS_CLUSTERS; do
              echo "Deleting Redis cluster: $CLUSTER"
              aws elasticache delete-replication-group \
                --replication-group-id $CLUSTER \
                --no-retain-primary-cluster || echo "Failed to delete $CLUSTER"
            done
          fi
          
          # Also check for standalone cache clusters
          CACHE_CLUSTERS=$(aws elasticache describe-cache-clusters \
            --query "CacheClusters[?starts_with(CacheClusterId, 'healink')].CacheClusterId" \
            --output text || echo "")
          
          if [ -z "$CACHE_CLUSTERS" ]; then
            echo "No cache clusters found"
          else
            for CLUSTER in $CACHE_CLUSTERS; do
              echo "Deleting cache cluster: $CLUSTER"
              aws elasticache delete-cache-cluster \
                --cache-cluster-id $CLUSTER || echo "Failed to delete $CLUSTER"
            done
          fi
          
          echo "‚úÖ Redis destruction initiated (will take ~5 minutes)"

      - name: ‚è≥ Wait for Redis deletion
        run: |
          echo "Waiting for Redis clusters to be deleted..."
          sleep 60
          echo "‚úÖ Redis cleanup completed"

      - name: üßπ Delete Redis subnet groups
        run: |
          echo "Deleting Redis subnet groups..."
          
          SUBNET_GROUPS=$(aws elasticache describe-cache-subnet-groups \
            --query "CacheSubnetGroups[?starts_with(CacheSubnetGroupName, 'healink')].CacheSubnetGroupName" \
            --output text || echo "")
          
          if [ -z "$SUBNET_GROUPS" ]; then
            echo "No Redis subnet groups found"
            exit 0
          fi
          
          for SG in $SUBNET_GROUPS; do
            echo "Deleting subnet group: $SG"
            aws elasticache delete-cache-subnet-group \
              --cache-subnet-group-name $SG || echo "Failed to delete $SG"
          done
          
          echo "‚úÖ Redis subnet groups deleted"

  # ============================================
  # DESTROY RABBITMQ (Amazon MQ)
  # ============================================
  destroy-rabbitmq:
    name: üí£ Destroy RabbitMQ
    runs-on: ubuntu-latest
    needs: [destroy-redis]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: üî• Delete Amazon MQ brokers
        run: |
          echo "Destroying RabbitMQ brokers..."
          
          # List all brokers
          BROKERS=$(aws mq list-brokers \
            --query "BrokerSummaries[?starts_with(BrokerName, 'healink')].BrokerId" \
            --output text || echo "")
          
          if [ -z "$BROKERS" ]; then
            echo "No RabbitMQ brokers found"
            exit 0
          fi
          
          for BROKER in $BROKERS; do
            echo "Deleting RabbitMQ broker: $BROKER"
            aws mq delete-broker --broker-id $BROKER || echo "Failed to delete $BROKER"
          done
          
          echo "‚úÖ RabbitMQ destruction initiated (will take ~5-10 minutes)"

      - name: ‚è≥ Wait for RabbitMQ deletion
        run: |
          echo "Waiting for RabbitMQ brokers to be deleted..."
          sleep 120
          echo "‚úÖ RabbitMQ cleanup completed"

  # ============================================
  # VERIFY SAFETY
  # ============================================
  verify-safety:
    name: ‚úÖ Verify ECR & RDS Still Exist
    runs-on: ubuntu-latest
    needs: [destroy-rabbitmq]
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: üîë Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::855160720656:role/GitHubActionRole-Healink
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚úÖ Verify ECR repositories exist
        if: ${{ inputs.keep_ecr_images }}
        run: |
          echo "Verifying ECR repositories..."
          
          ECR_REPOS=$(aws ecr describe-repositories \
            --query 'repositories[?starts_with(repositoryName, `healink`)].repositoryName' \
            --output text || echo "")
          
          if [ -z "$ECR_REPOS" ]; then
            echo "‚ö†Ô∏è  WARNING: No ECR repositories found!"
          else
            echo "‚úÖ ECR repositories found:"
            for REPO in $ECR_REPOS; do
              echo "  - $REPO"
              
              # Count images
              IMAGE_COUNT=$(aws ecr list-images --repository-name $REPO --query 'length(imageIds)' --output text || echo "0")
              echo "    Images: $IMAGE_COUNT"
            done
          fi

      - name: ‚úÖ Verify RDS instances exist
        if: ${{ inputs.keep_rds }}
        run: |
          echo "Verifying RDS instances..."
          
          RDS_INSTANCES=$(aws rds describe-db-instances \
            --query 'DBInstances[?starts_with(DBInstanceIdentifier, `healink`)].DBInstanceIdentifier' \
            --output text || echo "")
          
          if [ -z "$RDS_INSTANCES" ]; then
            echo "‚ö†Ô∏è  WARNING: No RDS instances found!"
          else
            echo "‚úÖ RDS instances found:"
            for INSTANCE in $RDS_INSTANCES; do
              echo "  - $INSTANCE"
              
              # Get status
              STATUS=$(aws rds describe-db-instances \
                --db-instance-identifier $INSTANCE \
                --query 'DBInstances[0].DBInstanceStatus' \
                --output text || echo "unknown")
              echo "    Status: $STATUS"
            done
          fi

  # ============================================
  # FINAL REPORT
  # ============================================
  final-report:
    name: üìä Destruction Report
    runs-on: ubuntu-latest
    needs: [verify-safety]
    if: always()
    
    steps:
      - name: üìä Generate report
        run: |
          echo "=== ‚ò¢Ô∏è  NUKE OPERATION COMPLETED ==="
          echo ""
          echo "Environment: ${{ inputs.environment }}"
          echo "Timestamp: $(date)"
          echo ""
          echo "‚úÖ DESTROYED:"
          echo "  - ECS Clusters and Services"
          echo "  - Application Load Balancers"
          echo "  - Target Groups"
          echo "  - Security Groups"
          echo "  - CloudWatch Log Groups"
          echo "  - IAM Roles (ECS Task Execution)"
          echo "  - ElastiCache Redis"
          echo "  - Amazon MQ RabbitMQ"
          echo ""
          echo "‚úÖ PRESERVED:"
          if [ "${{ inputs.keep_ecr_images }}" == "true" ]; then
            echo "  - ECR Repositories (Docker images intact)"
          fi
          if [ "${{ inputs.keep_rds }}" == "true" ]; then
            echo "  - RDS PostgreSQL Database (data intact)"
          fi
          echo ""
          echo "üí∞ COST SAVINGS:"
          echo "  - ECS Fargate: ~$0/month (deleted)"
          echo "  - ALB: ~$0/month (deleted)"
          echo "  - ElastiCache Redis: ~$0/month (deleted)"
          echo "  - Amazon MQ RabbitMQ: ~$0/month (deleted)"
          echo "  - Remaining costs: RDS (~$15/month) + ECR storage (~$1/month)"
          echo "  - Total savings: ~$50/month ‚Üí Only ~$16/month remaining"
          echo ""
          echo "üöÄ TO REDEPLOY:"
          echo "  Run the 'Full Deploy' workflow to recreate all services"
          echo ""
          
          if [ "${{ needs.verify-safety.result }}" == "success" ]; then
            echo "‚úÖ All safety checks passed - data is safe!"
          else
            echo "‚ö†Ô∏è  WARNING: Some safety checks failed - verify manually!"
          fi
